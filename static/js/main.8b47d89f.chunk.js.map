{"version":3,"sources":["store.js","reducers/homePage.js","reducers/showPage.js","reducers/episodePage.js","reducers.js","constants.js","components/FeaturedShow/FeaturedShow.js","components/ShowTeaserCard/ShowTeaserCard.js","components/ShowList/ShowList.js","actions/shows.js","pages/HomePage/HomePage.js","actions/episodes.js","containers/ErrorBoundary/ErrorBoundary.js","components/ShowDetail/ShowDetail.js","components/EpisodeTeaserCard/EpisodeTeaserCard.js","components/EpisodeList/EpisodeList.js","pages/ShowPage/ShowPage.js","components/EpisodeDetail/EpisodeDetail.js","pages/EpisodePage/EpisodePage.js","containers/App/App.js","serviceWorker.js","index.js","assets/placeholder.jpg","assets/arrow-back.svg"],"names":["initialState","showDetail","isLoadingShowDetail","showList","isLoadingShowList","episodeList","isLoadingEpisodeList","selectedSeason","episodeDetail","isLoadingEpisodeDetail","combineReducers","homePage","state","action","type","payload","showPage","episodePage","middleware","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","initializeStore","createStore","rootReducer","applyMiddleware","FeaturedShow","isLoading","show","premiereDate","Date","premiered","getFullYear","className","Fragment","to","id","undefined","image","src","PlaceholderImage","alt","name","original","genres","join","dangerouslySetInnerHTML","__html","sanitizeHtml","summary","allowedTags","allowedAttributes","ShowTeaserCard","showId","showName","showImage","key","ShowList","Array","map","_","i","medium","getShowDetail","dispatch","axios","get","then","res","data","catch","err","console","log","HomePage","this","props","length","getShowList","React","Component","connect","getEpisodeList","ErrorBoundary","hasError","error","errorInfo","children","ShowDetail","EpisodeTeaserCard","number","season","EpisodeList","episode","ShowPage","handleSeasonChange","selectedValue","changeSeason","value","Set","filter","match","params","selectSeasonOptions","getSeasonsList","seasonNumber","label","BackArrow","defaultValue","onChange","options","isSearchable","filterEpisodesBySeason","EpisodeDetail","EpisodePage","episodeId","getEpisodeDetailById","episodeSlug","toString","pageNotFound","App","store","basename","path","exact","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8b47d89f.chunk.js","sourcesContent":["import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst middleware = [thunk];\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const initializeStore = initialState =>\n  createStore(\n    rootReducer,\n    initialState,\n    composeEnhancers(applyMiddleware(...middleware))\n  );\n\nexport default initializeStore({});\n","import { GET_SHOWDETAIL, GET_SHOWLIST } from \"../constants.js\";\n\nconst initialState = {\n  showDetail: [],\n  isLoadingShowDetail: true,\n  showList: [],\n  isLoadingShowList: true\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_SHOWDETAIL:\n      return {\n        ...state,\n        showDetail: action.payload,\n        isLoadingShowDetail: false\n      };\n    case GET_SHOWLIST:\n      return {\n        ...state,\n        showList: action.payload,\n        isLoadingShowList: false\n      };\n    default:\n      return state;\n  }\n}\n","import { GET_SHOWDETAIL, GET_EPISODELIST, CHANGE_SEASON } from \"../constants.js\";\n\nconst initialState = {\n  showDetail: [],\n  isLoadingShowDetail: true,\n  episodeList: [],\n  isLoadingEpisodeList: true,\n  selectedSeason: 1\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_SHOWDETAIL:\n      return {\n        ...state,\n        showDetail: action.payload,\n        isLoadingShowDetail: false\n      };\n    case GET_EPISODELIST:\n      return {\n        ...state,\n        episodeList: action.payload,\n        isLoadingEpisodeList: false,\n        selectedSeason: 1\n      };\n    case CHANGE_SEASON:\n      return {\n        ...state,\n        selectedSeason: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { GET_EPISODEDETAILBYID, CHANGE_SEASON } from \"../constants.js\";\n\nconst initialState = {\n  episodeDetail: [],\n  isLoadingEpisodeDetail: true,\n  selectedSeason: 1\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_EPISODEDETAILBYID:\n      return {\n        ...state,\n        episodeDetail: action.payload,\n        isLoadingEpisodeDetail: false\n      };\n    case CHANGE_SEASON:\n      return {\n        ...state,\n        selectedSeason: action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\n\nimport homePage from \"./reducers/homePage\";\nimport showPage from \"./reducers/showPage\";\nimport episodePage from \"./reducers/episodePage\";\n\nexport default combineReducers({\n  homePage,\n  showPage,\n  episodePage\n});\n","// HomePage\nexport const GET_SHOWLIST = \"GET_SHOWLIST\";\n\n// ShowPage\nexport const GET_SHOWDETAIL = \"GET_SHOWDETAIL\";\nexport const GET_EPISODELIST = \"GET_EPISODELIST\";\nexport const CHANGE_SEASON = \"CHANGE_SEASON\";\n\n// EpisodePage\nexport const GET_EPISODEDETAILBYID = \"GET_EPISODEDETAILBYID\";\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport sanitizeHtml from \"sanitize-html-react\";\nimport \"./FeaturedShow.scss\";\nimport PlaceholderImage from \"../../assets/placeholder.jpg\";\n\nconst FeaturedShow = ({ isLoading, show }) => {\n  const premiereDate = new Date(show.premiered).getFullYear();\n\n  return (\n    <section className=\"FeaturedShow\">\n      {!isLoading ? (\n        <React.Fragment>\n          <Link to={`/shows/${show.id}`}>\n            {show.image === undefined ? (\n              <img src={PlaceholderImage} alt={show.name} className=\"FeaturedShow__image\" />\n            ) : (\n              <img src={show.image.original} alt={show.name} className=\"FeaturedShow__image\" />\n            )}\n          </Link>\n          <div className=\"FeaturedShow__details\">\n            <h2 className=\"h1\">{show.name}</h2>\n            <div className=\"FeaturedShow__additional-info\">\n              <span className=\"FeaturedShow__date\">{premiereDate}</span>\n\n              <span className=\"FeaturedShow__genres\">{show.genres.join(\", \")}</span>\n            </div>\n            <div\n              className=\"FeaturedShow__summary\"\n              dangerouslySetInnerHTML={{\n                __html: sanitizeHtml(show.summary, {\n                  allowedTags: [\"p\"],\n                  allowedAttributes: {}\n                })\n              }}\n            />\n            <Link to={`/shows/${show.id}`} className=\"FeaturedShow__link\">\n              More Infos\n            </Link>\n          </div>\n        </React.Fragment>\n      ) : (\n        <React.Fragment>Loading</React.Fragment>\n      )}\n    </section>\n  );\n};\nexport default FeaturedShow;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./ShowTeaserCard.scss\";\n\nconst ShowTeaserCard = ({ showId, showName, showImage }) => {\n  return (\n    <article className=\"ShowTeaserCard\">\n      <Link to={`/shows/${showId}`} key={showId} className=\"ShowTeaserCard__link\">\n        <img src={showImage} alt={showName} className=\"ShowTeaserCard__card\" />\n        <div className=\"ShowTeaserCard__title\">{showName}</div>\n      </Link>\n    </article>\n  );\n};\n\nexport default ShowTeaserCard;\n","import React from \"react\";\nimport \"./ShowList.scss\";\nimport ShowTeaserCard from \"../ShowTeaserCard\";\n\nimport PlaceholderImage from \"../../assets/placeholder.jpg\";\n\nconst ShowList = ({ isLoading, showList }) => (\n  <section className=\"ShowList\">\n    <h2>Shows</h2>\n    <div className=\"ShowList__grid\">\n      {!isLoading ? (\n        <React.Fragment>\n          {showList.map((show, i) =>\n            show.image === undefined ? (\n              <ShowTeaserCard\n                showId={show.id}\n                showName={show.name}\n                key={i}\n                showImage={PlaceholderImage}\n              />\n            ) : (\n              <ShowTeaserCard\n                showId={show.id}\n                showName={show.name}\n                key={i}\n                showImage={show.image.medium}\n              />\n            )\n          )}\n          )} }\n        </React.Fragment>\n      ) : (\n        <React.Fragment>\n          {[...Array(6)].map((_, i) => (\n            <ShowTeaserCard key={i} showId={i} showName=\"Show\" showImage={PlaceholderImage} />\n          ))}\n        </React.Fragment>\n      )}\n    </div>\n  </section>\n);\nexport default ShowList;\n","import axios from \"axios\";\nimport { GET_SHOWLIST, GET_SHOWDETAIL, CHANGE_SEASON } from \"../constants\";\n\n// Returns only the first page of shows\nexport const getShowList = () => dispatch => {\n  axios\n    .get(\"http://api.tvmaze.com/shows?page=1\")\n    .then(res => {\n      dispatch({\n        type: GET_SHOWLIST,\n        payload: res.data\n      });\n    })\n    .catch(err => console.log(err));\n};\n\nexport const getShowDetail = showId => dispatch => {\n  axios\n    .get(`http://api.tvmaze.com/shows/${showId}`)\n    .then(res => {\n      dispatch({\n        type: GET_SHOWDETAIL,\n        payload: res.data\n      });\n    })\n    .catch(err => console.log(err));\n};\n\nexport const changeSeason = seasonNumber => ({\n  type: CHANGE_SEASON,\n  payload: seasonNumber\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./HomePage.scss\";\n\nimport FeaturedShow from \"../../components/FeaturedShow\";\nimport ShowList from \"../../components/ShowList\";\n\nimport { getShowDetail, getShowList } from \"../../actions/shows\";\n\nclass HomePage extends React.Component {\n  componentDidMount() {\n    //if (this.props.showDetail.length === 0) {\n    // Re-use of getShowDetail function - may show re-rendering in frontend\n    this.props.getShowDetail(6771);\n    //}\n    if (this.props.showList.length === 0) {\n      this.props.getShowList();\n    }\n  }\n\n  render() {\n    const { isLoadingShowDetail, showDetail, isLoadingShowList, showList } = this.props;\n    return (\n      <div className=\"HomePage\">\n        <div className=\"HomePage__featured\">\n          <FeaturedShow isLoading={isLoadingShowDetail} show={showDetail} />\n        </div>\n\n        <div className=\"HomePage__show-list\">\n          <ShowList isLoading={isLoadingShowList} showList={showList} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingShowDetail: state.homePage.isLoadingShowDetail,\n  isLoadingShowList: state.homePage.isLoadingShowList,\n  showDetail: state.homePage.showDetail,\n  showList: state.homePage.showList\n});\n\nexport default connect(mapStateToProps, { getShowDetail, getShowList })(HomePage);\n","import axios from \"axios\"; //\nimport { GET_EPISODELIST, GET_EPISODEDETAILBYID, CHANGE_SEASON } from \"../constants\";\n\nexport const getEpisodeList = showId => dispatch => {\n  axios\n    .get(`http://api.tvmaze.com/shows/${showId}/episodes`)\n    .then(res => {\n      dispatch({\n        type: GET_EPISODELIST,\n        payload: res.data\n      });\n    })\n    .catch(err => console.log(err));\n};\n\nexport const getEpisodeDetailById = episodeId => dispatch => {\n  axios\n    .get(`http://api.tvmaze.com/episodes/${episodeId}`)\n    .then(res => {\n      dispatch({\n        type: GET_EPISODEDETAILBYID,\n        payload: res.data\n      });\n    })\n    .catch(err => console.log(err));\n};\n\nexport const changeSeason = seasonNumber => ({\n  type: CHANGE_SEASON,\n  payload: seasonNumber\n});\n","import React from \"react\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    //logErrorToMyService(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\nexport default ErrorBoundary;\n","import React from \"react\";\nimport sanitizeHtml from \"sanitize-html-react\";\nimport \"./ShowDetail.scss\";\nexport const ShowDetail = ({ isLoading, show }) => {\n  return (\n    <section className=\"ShowDetail\">\n      {!isLoading ? (\n        <React.Fragment>\n          <img src={show.image.original} alt={show.name} className=\"ShowDetail__image\" />\n          <div className=\"ShowDetail__details\">\n            <h2 className=\"h1\">{show.name}</h2>\n            <div\n              className=\"ShowDetail__summary\"\n              dangerouslySetInnerHTML={{\n                __html: sanitizeHtml(show.summary, {\n                  allowedTags: [\"p\"],\n                  allowedAttributes: {}\n                })\n              }}\n            />\n          </div>\n        </React.Fragment>\n      ) : (\n        <React.Fragment>Loading</React.Fragment>\n      )}\n    </section>\n  );\n};\n\nexport default ShowDetail;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./EpisodeTeaserCard.scss\";\n\nconst EpisodeTeaserCard = ({ showId, id, name, season, number }) => {\n  return (\n    <Link to={`/shows/${showId}/episodes/${id}`} className=\"EpisodeTeaserCard\">\n      <article className=\"EpisodeTeaserCard__card\">\n        <div className=\"EpisodeTeaserCard__title\">\n          <strong>\n            {number}. {name}\n          </strong>\n          <p></p>\n        </div>\n      </article>\n    </Link>\n  );\n};\n\nexport default EpisodeTeaserCard;\n","import React from \"react\";\nimport EpisodeTeaserCard from \"../EpisodeTeaserCard\";\nimport \"./EpisodeList.scss\";\n\nconst EpisodeList = ({ isLoading, episodeList, showId }) => {\n  return (\n    <section className=\"EpisodeList\">\n      <div className=\"EpisodeList__grid\">\n        {!isLoading ? (\n          <React.Fragment>\n            {episodeList.map((episode, i) => {\n              return (\n                <EpisodeTeaserCard\n                  key={i}\n                  showId={showId}\n                  id={episode.id}\n                  name={episode.name}\n                  season={episode.season}\n                  number={episode.number}\n                />\n              );\n            })}\n          </React.Fragment>\n        ) : (\n          <React.Fragment>loading</React.Fragment>\n        )}\n      </div>\n    </section>\n  );\n  //}\n};\n\nexport default EpisodeList;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport \"./ShowPage.scss\";\nimport Select from \"react-select\";\nimport { getShowDetail, changeSeason } from \"../../actions/shows\";\nimport { getEpisodeList } from \"../../actions/episodes\";\n\nimport BackArrow from \"../../assets/arrow-back.svg\";\n\nimport ErrorBoundary from \"../../containers/ErrorBoundary\";\nimport ShowDetail from \"../../components/ShowDetail\";\nimport EpisodeList from \"../../components/EpisodeList\";\n\nclass ShowPage extends React.Component {\n  getSeasonsList() {\n    return [...new Set(this.props.episodeList.map(episode => episode.season))];\n  }\n\n  // Event handler for select season dropdown\n  handleSeasonChange = selectedValue => {\n    this.props.changeSeason(selectedValue.value);\n  };\n\n  filterEpisodesBySeason() {\n    return this.props.episodeList.filter(episode => {\n      return episode.season === this.props.selectedSeason;\n    });\n  }\n\n  componentDidMount() {\n    let showId = this.props.match.params.showId;\n    if (this.props.showDetail.length === 0) {\n      this.props.getShowDetail(showId);\n      this.props.getEpisodeList(showId);\n    } else if (showId !== this.props.showDetail.id) {\n      this.props.getShowDetail(showId);\n      this.props.getEpisodeList(showId);\n    }\n  }\n\n  render() {\n    const { isLoadingShowDetail, isLoadingEpisodeList, showDetail, selectedSeason } = this.props;\n\n    const showId = this.props.match.params.showId;\n\n    // Create options of select season dropdown\n    const selectSeasonOptions = this.getSeasonsList().map((seasonNumber, i) => {\n      return { value: seasonNumber, label: \"Season \" + seasonNumber };\n    });\n\n    return (\n      <div className=\"ShowPage\">\n        <div className=\"ShowPage__details\">\n          <div className=\"ShowPage__back-home\">\n            <Link to=\"/\" className=\"\">\n              <img src={BackArrow} alt=\"Home\" />\n            </Link>\n          </div>\n          <ErrorBoundary>\n            <ShowDetail isLoading={isLoadingShowDetail} show={showDetail} />\n          </ErrorBoundary>\n        </div>\n        <div className=\"ShowPage__episodes\">\n          <h2 className=\"sr-only\">Episodes</h2>\n          <Select\n            defaultValue={{ value: selectedSeason, label: `Season ${selectedSeason}` }}\n            onChange={this.handleSeasonChange}\n            options={selectSeasonOptions}\n            isSearchable={false}\n            className=\"ShowPage__select-season\"\n          />\n          <ErrorBoundary>\n            <EpisodeList\n              isLoading={isLoadingEpisodeList}\n              episodeList={this.filterEpisodesBySeason()}\n              showId={showId}\n            />\n          </ErrorBoundary>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingShowDetail: state.showPage.isLoadingShowDetail,\n  isLoadingEpisodeList: state.showPage.isLoadingEpisodeList,\n  showDetail: state.showPage.showDetail,\n  episodeList: state.showPage.episodeList,\n  selectedSeason: state.showPage.selectedSeason\n});\n\nexport default connect(mapStateToProps, { getShowDetail, getEpisodeList, changeSeason })(ShowPage);\n","import React from \"react\";\nimport sanitizeHtml from \"sanitize-html-react\";\nimport PlaceholderImage from \"../../assets/placeholder.jpg\";\nimport \"./EpisodeDetail.scss\";\n\nconst EpisodeDetail = ({ isLoading, episode }) => {\n  return (\n    <section className=\"EpisodeDetail\">\n      {!isLoading ? (\n        <React.Fragment>\n          {episode.image === null ? (\n            <img src={PlaceholderImage} alt={episode.name} className=\"EpisodeDetail__image\" />\n          ) : (\n            <img src={episode.image.original} alt={episode.name} className=\"EpisodeDetail__image\" />\n          )}\n\n          <div className=\"EpisodeDetail__details\">\n            <h2 className=\"h1\">{episode.name}</h2>\n            {episode.summary !== null ? (\n              <div\n                className=\"EpisodeDetail__summary\"\n                dangerouslySetInnerHTML={{\n                  __html: sanitizeHtml(episode.summary, {\n                    allowedTags: [\"p\"],\n                    allowedAttributes: {}\n                  })\n                }}\n              />\n            ) : (\n              <div className=\"EpisodeDetail__summary\">No summary.</div>\n            )}\n          </div>\n        </React.Fragment>\n      ) : (\n        <React.Fragment>Loading</React.Fragment>\n      )}\n    </section>\n  );\n};\n\nexport default EpisodeDetail;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport { connect } from \"react-redux\";\nimport { getEpisodeList, getEpisodeDetailById, changeSeason } from \"../../actions/episodes\";\nimport ErrorBoundary from \"../../containers/ErrorBoundary\";\nimport BackArrow from \"../../assets/arrow-back.svg\";\n\nimport \"./EpisodePage.scss\";\n\nimport EpisodeDetail from \"../../components/EpisodeDetail\";\nimport EpisodeList from \"../../components/EpisodeList\";\n\nclass EpisodePage extends React.Component {\n  getSeasonsList() {\n    return [...new Set(this.props.episodeList.map(episode => episode.season))];\n  }\n\n  // Event handler for select season dropdown\n  handleSeasonChange = selectedValue => {\n    //console.log(this.props);\n    this.props.changeSeason(selectedValue.value);\n  };\n\n  filterEpisodesBySeason() {\n    return this.props.episodeList.filter(episode => {\n      return episode.season === this.props.selectedSeason;\n    });\n  }\n\n  componentDidMount() {\n    let { showId, episodeId } = this.props.match.params;\n    if (this.props.episodeDetail.length === 0) {\n      this.props.getEpisodeDetailById(episodeId);\n      this.props.getEpisodeList(showId);\n    } else if (episodeId !== this.props.episodeDetail.id) {\n      this.props.getEpisodeDetailById(episodeId);\n      this.props.getEpisodeList(showId);\n    }\n  }\n\n  componentDidUpdate() {\n    let episodeSlug = this.props.match.params.episodeId;\n    let episodeId = this.props.episodeDetail.id;\n\n    if (episodeId !== undefined) {\n      if (episodeSlug !== episodeId.toString()) {\n        this.props.getEpisodeDetailById(episodeSlug);\n      }\n    }\n  }\n  render() {\n    const {\n      isLoadingEpisodeDetail,\n      isLoadingEpisodeList,\n      episodeDetail,\n      selectedSeason\n    } = this.props;\n\n    const showId = this.props.match.params.showId;\n\n    // Create options of select season dropdown\n    const selectSeasonOptions = this.getSeasonsList().map((seasonNumber, i) => {\n      return { value: seasonNumber, label: \"Season \" + seasonNumber };\n    });\n\n    return (\n      <div className=\"EpisodePage\">\n        <div className=\"EpisodePage__details\">\n          <div className=\"EpisodePage__back-show\">\n            <Link to={`/shows/${showId}`} className=\"\">\n              <img src={BackArrow} alt=\"Home\" />\n            </Link>\n          </div>\n          <ErrorBoundary>\n            <EpisodeDetail isLoading={isLoadingEpisodeDetail} episode={episodeDetail} />\n          </ErrorBoundary>\n        </div>\n        <div className=\"EpisodePage__episodes\">\n          <h2 className=\"sr-only\">Episodes</h2>\n          <Select\n            defaultValue={{ value: selectedSeason, label: `Season ${selectedSeason}` }}\n            onChange={this.handleSeasonChange}\n            options={selectSeasonOptions}\n            isSearchable={false}\n            className=\"ShowPage__select-season\"\n          />\n          <ErrorBoundary>\n            <EpisodeList\n              isLoading={isLoadingEpisodeList}\n              episodeList={this.filterEpisodesBySeason()}\n              showId={showId}\n            />\n          </ErrorBoundary>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingEpisodeDetail: state.episodePage.isLoadingEpisodeDetail,\n  episodeDetail: state.episodePage.episodeDetail,\n  isLoadingEpisodeList: state.showPage.isLoadingEpisodeList,\n  episodeList: state.showPage.episodeList,\n  selectedSeason: state.episodePage.selectedSeason\n});\nexport default connect(mapStateToProps, { getEpisodeList, getEpisodeDetailById, changeSeason })(\n  EpisodePage\n);\n","import React from \"react\";\nimport \"./App.scss\";\n\n// State management\nimport { Provider } from \"react-redux\";\nimport store from \"../../store\";\n\n// Page routing\nimport { HashRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport HomePage from \"../../pages/HomePage\";\nimport ShowPage from \"../../pages/ShowPage\";\nimport EpisodePage from \"../../pages/EpisodePage\";\n\nconst pageNotFound = () => {\n  return (\n    <div className=\"App__page-not-found\">\n      <h1>404: Page Not Found</h1>\n      <Link to=\"/\">Home</Link>\n    </div>\n  );\n};\n\nclass App extends React.Component {\n  render() {\n    return (\n      <main className=\"App\">\n        <h1 className=\"sr-only\">TV Show App</h1>\n        <Provider store={store}>\n          <Router basename=\"/\">\n            <Switch>\n              <Route path=\"/\" exact component={HomePage} />\n              <Route path=\"/shows\" exact component={HomePage} />\n              <Route path=\"/shows/:showId\" exact component={ShowPage} />\n              <Route path=\"/shows/:showId/episodes/:episodeId\" exact component={EpisodePage} />\n              <Route path=\"/shows/:showId/episodes\" component={ShowPage} />\n              <Route path=\"/shows/:showId\" component={ShowPage} />\n              <Route component={pageNotFound} />\n            </Switch>\n          </Router>\n        </Provider>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport ErrorBoundary from \"./containers/ErrorBoundary\";\n\nReactDOM.render(\n  <ErrorBoundary>\n    <App />\n  </ErrorBoundary>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/placeholder.75e2a7cd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-back.d6cf0c0e.svg\";"],"sourceRoot":""}